1  下载webpack
-g 全局安装   -d 当前文件安装
npm i -g webpack  （npm install --save-dev webpack 安装到当前目录）

2  npm init  初始化 
会填一下项目名称 版本什么的信息  可以直接回车跳过
生成 package.json文件

 3 创建文件夹 app和public

app
----main.js  
----red.js
public
----index.html (html里面要引入打包后的js，名称自己定）

4 创建webpack.config.js  
里面填写 引入路径和 输出路径和名称， 和HTML引入js的名称要一致

5 输入指令 webpack(不是全局用 node_modules/.bin/webpack)
发现 没有webpack-cli(因为 webpack4版本要额为安装webpack-cli)
然后在 public文件夹中生成 dong.js文件 （成功）


6 优化命令 
在package.json文件里面 找打script属性 添加 start: webpack,  就可以用 npm run start 打包了


7 在webpage.config.js里配置 devtool属性
source-map            
在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source-map  ，但是它会减慢打包速度；

eval-source-map    
使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，
但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项

cheap-module-eval-source-map   
这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，
没有列映射，和eval-source-map选项具有相似的缺点


8 使用webpack构建本地服务
webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，
在webpack中进行配置之前需要单独安装它作为项目依赖
首先先执行命令下载 
cnpm install --save-dev webpack-dev-server

然后在webpack.config.js文件配置 devServer 
 devServer: {
    contentBase: "./public",   // 将要代理文件下的index.html
    historyApiFallback: true,  //所以的跳转将指向index.html
    port: "8086",
    inline: true,          // 当源文件改变时会自动刷新页面
    open: true,            // 自动打开浏览器
}
最后在 package.json  script里写入命令
"server": "webpack-dev-server --open"